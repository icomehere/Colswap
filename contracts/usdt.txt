// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.6;


contract USDT {
    string public constant name = "USDT";
    string public constant symbol = "USDT";
    uint8 public constant decimals = 6;
    mapping (address => uint) public balanceOf;
    uint256 public totalSupply;
    mapping (address => mapping (address => uint)) public allowances;

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);



    constructor() {
        balanceOf[msg.sender] = 100000000000000;
        totalSupply = 100000000000000;

        emit Transfer(address(0x0), msg.sender, totalSupply);
    }


    function mint() external {
        balanceOf[msg.sender] += 100000000000000;
        totalSupply += 100000000000000;

        emit Transfer(address(0x0), msg.sender, 100000000000000);

    }

    function transfer(address to, uint256 amount) public returns (bool) {
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }


    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public returns (bool) {
        uint a = allowances[from][msg.sender] - amount;
        allowances[from][msg.sender] = a;
        emit Approval(from, msg.sender, a);
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        uint a = allowances[msg.sender][spender] + addedValue;
        approve(spender,a);
        emit Approval(msg.sender, spender, a);
        return true;
    }

    function decreaseAllowance(address spender, uint256 substractedValue) public virtual returns (bool) {
        uint a = allowances[msg.sender][spender] - substractedValue;
        approve(spender,a);
        emit Approval(msg.sender, spender, a);
        return true;
    }

}

