// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.6;


contract Col {
    
    /// @notice EIP-20 token name for this token
    string public constant name = "Colswap";

    /// @notice EIP-20 token symbol for this token
    string public constant symbol = "COL";

    /// @notice Allowance amounts on behalf of others
    mapping (address => mapping (address => uint)) internal allowances;

    /// @notice Official record of token balances for each account
    mapping (address => uint) internal balances;
    
    //my
    address public owner;
    address public colswapRouter;
    uint8 public constant decimals = 18;
    uint256 private constant MAX_UINT256 = type(uint256).max;
    uint256 public gonsPerFragment = 10**6;
    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**decimals;

    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.
    // Use the highest value that fits in a uint256 for max granularity.
    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);

    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2
    uint256 private constant MAX_SUPPLY = type(uint128).max; // (2^128) - 1

    uint256 private _totalSupply;
    
    mapping(address => uint256) private _gonBalances;
    // This is denominated in Fragments, because the gons-fragments conversion might change before
    // it's fully paid.
    mapping(address => mapping(address => uint256)) private _allowedFragments;

    // EIP-2612: permit â€“ 712-signed approvals
    // https://eips.ethereum.org/EIPS/eip-2612
    string public constant EIP712_REVISION = "1";
    bytes32 public constant EIP712_DOMAIN =
        keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
    bytes32 public constant PERMIT_TYPEHASH =
        keccak256(
            "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
        );

    // EIP-2612: keeps track of number of permits per address
    mapping(address => uint256) private _nonces;
    event LogRebase(uint256 indexed time, uint256 totalSupply);
    event ColswapRouterChanged(address oldA, address newA);
    event OwnerChanged(address oldA, address newA);
    //my

    /// @notice The standard EIP-20 transfer event
    event Transfer(address indexed from, address indexed to, uint256 amount);

    /// @notice The standard EIP-20 approval event
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    //my
    /**
     * @notice Construct a new Col token
     */
    constructor() {
        owner = msg.sender;

        _gonBalances[owner] = INITIAL_FRAGMENTS_SUPPLY;
        _totalSupply = INITIAL_FRAGMENTS_SUPPLY * gonsPerFragment;

        emit Transfer(address(0x0), owner, _totalSupply);
    }

    modifier validRecipient(address to) {
        require(to != address(0x0));
        require(to != address(this));
        _;
    }
    
    modifier onlyColswapRouter() {
        require(msg.sender == colswapRouter);
        _;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function setOwner(address owner_) external onlyOwner{
        emit OwnerChanged(owner, owner_);
        owner = owner_;
    }

    function setColswapRouter(address colswapRouter_) external onlyOwner{
        emit ColswapRouterChanged(colswapRouter, colswapRouter_);
        colswapRouter = colswapRouter_;
    }

    /**
     * @notice Mint new tokens
     * @param dst The address of the destination account
     * @param amount The number of tokens to be minted
     */
    function mint(address dst, uint amount) external onlyColswapRouter() validRecipient(dst) {
        
        uint _amount = amount / gonsPerFragment;
        uint amount_ = _amount * gonsPerFragment;
        _gonBalances[dst] += _amount;
        require(_gonBalances[dst] <= MAX_SUPPLY);
        _totalSupply += amount_;
        require(_totalSupply <= MAX_SUPPLY);

        emit Transfer(address(0x0), dst, amount_);

    }

    function rebase(bool isAdd)
        external
        onlyColswapRouter
        returns (uint256)
    {   
        if (isAdd) {
            gonsPerFragment = gonsPerFragment * 105 / 100;
            _totalSupply = _totalSupply * 105 / 100;
            require(_totalSupply <= MAX_SUPPLY);
        } else {
            gonsPerFragment = gonsPerFragment * 95 / 100;
            _totalSupply = _totalSupply * 95 / 100;
        }

        emit LogRebase(block.timestamp, _totalSupply);
        return _totalSupply;
    }
    
    function balanceOf(address who) external view returns (uint256) {
        return _gonBalances[who] * gonsPerFragment;
    }
    
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @param who The address to query.
     * @return The gon balance of the specified address.
     */
    function scaledBalanceOf(address who) external view returns (uint256) {
        return _gonBalances[who];
    }

    /**
     * @return the total number of gons.
     */
    function scaledTotalSupply() external view returns (uint256) {
        return _totalSupply / gonsPerFragment;
    }

    /**
     * @dev Transfer tokens to a specified address.
     * @param to The address to transfer to.
     * @param value The amount to be transferred.
     * @return True on success, false otherwise.
     */
    function transfer(address to, uint256 value)
        external
        validRecipient(to)
        returns (bool)
    {
        uint256 gonValue = value / gonsPerFragment;

        _gonBalances[msg.sender] = _gonBalances[msg.sender] - gonValue;
        _gonBalances[to] = _gonBalances[to] + gonValue;

        emit Transfer(msg.sender, to, gonValue * gonsPerFragment);
        return true;
    }

    /**
     * @dev Transfer all of the sender's wallet balance to a specified address.
     * @param to The address to transfer to.
     * @return True on success, false otherwise.
     */
    function transferAll(address to) external validRecipient(to) returns (bool) {
        uint256 gonValue = _gonBalances[msg.sender];
        uint256 value = gonValue * gonsPerFragment;

        delete _gonBalances[msg.sender];
        _gonBalances[to] = _gonBalances[to] + gonValue;

        emit Transfer(msg.sender, to, value);
        return true;
    }


    /**
     * @dev Transfer tokens from one address to another.
     * @param from The address you want to send tokens from.
     * @param to The address you want to transfer to.
     * @param value The amount of tokens to be transferred.
     */
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external validRecipient(to) returns (bool) {
        uint256 gonValue = value / gonsPerFragment;
        uint256 value_ = gonValue * gonsPerFragment;
        _gonBalances[from] = _gonBalances[from] - gonValue;
        _gonBalances[to] = _gonBalances[to] + gonValue;
        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender] - value_;
        emit Transfer(from, to, value_);
        return true;
    }

    /**
     * @dev Transfer all balance tokens from one address to another.
     * @param from The address you want to send tokens from.
     * @param to The address you want to transfer to.
     */
    function transferAllFrom(address from, address to) external validRecipient(to) returns (bool) {
        uint256 gonValue = _gonBalances[from];
        uint256 value = gonValue * gonsPerFragment;

        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender] - value;

        delete _gonBalances[from];
        _gonBalances[to] = _gonBalances[to] + gonValue;

        emit Transfer(from, to, value);
        return true;
    }
    
    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of
     * msg.sender. This method is included for ERC20 compatibility.
     * increaseAllowance and decreaseAllowance should be used instead.
     * Changing an allowance with this method brings the risk that someone may transfer both
     * the old and the new allowance - if they are both greater than zero - if a transfer
     * transaction is mined before the later approve() call is mined.
     *
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) external returns (bool) {
        _allowedFragments[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);
        return true;
    }

    /**
     * @dev Function to check the amount of tokens that an owner has allowed to a spender.
     * @param owner_ The address which owns the funds.
     * @param spender The address which will spend the funds.
     * @return The number of tokens still available for the spender.
     */
    function allowance(address owner_, address spender) external view returns (uint256) {
        return _allowedFragments[owner_][spender];
    }

    /**
     * @dev Increase the amount of tokens that an owner has allowed to a spender.
     * This method should be used instead of approve() to avoid the double approval vulnerability
     * described above.
     * @param spender The address which will spend the funds.
     * @param addedValue The amount of tokens to increase the allowance by.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender]+addedValue;

        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);
        return true;
    }

    /**
     * @dev Decrease the amount of tokens that an owner has allowed to a spender.
     *
     * @param spender The address which will spend the funds.
     * @param subtractedValue The amount of tokens to decrease the allowance by.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 oldValue = _allowedFragments[msg.sender][spender];
        _allowedFragments[msg.sender][spender] = (subtractedValue >= oldValue) ? 0 : oldValue - subtractedValue;

        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);
        return true;
    }
    
    /*
    /**
     * @dev Allows for approvals to be made via secp256k1 signatures.
     * @param owner_ The owner of the funds
     * @param spender The spender
     * @param value The amount
     * @param deadline The deadline timestamp, type(uint256).max for max deadline
     * @param v Signature param
     * @param s Signature param
     * @param r Signature param
     */
    function permit(
        address owner_,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) public {
        require(block.timestamp <= deadline);

        uint256 ownerNonce = _nonces[owner_];
        bytes32 permitDataDigest = keccak256(
            abi.encode(PERMIT_TYPEHASH, owner_, spender, value, ownerNonce, deadline)
        );
        bytes32 digest = keccak256(
            abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR(), permitDataDigest)
        );

        require(owner_ == ecrecover(digest, v, r, s));

        _nonces[owner_] = ownerNonce + 1;

        _allowedFragments[owner_][spender] = value;
        emit Approval(owner_, spender, value);
    }

    /**
     * @return The number of successful permits by the specified address.
     */
    function nonces(address who) public view returns (uint256) {
        return _nonces[who];
    }

    /**
     * @return The computed DOMAIN_SEPARATOR to be used off-chain services
     *         which implement EIP-712.
     *         https://eips.ethereum.org/EIPS/eip-2612
     */
    function DOMAIN_SEPARATOR() public view returns (bytes32) {
        uint256 chainId;
        assembly {
            chainId := chainid()
        }
        return
            keccak256(
                abi.encode(
                    EIP712_DOMAIN,
                    keccak256(bytes(name)),
                    keccak256(bytes(EIP712_REVISION)),
                    chainId,
                    address(this)
                )
            );
    }
}


